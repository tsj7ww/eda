services:
  python:
    build:
      context: ./docker/python
      dockerfile: Dockerfile
    container_name: eda-python
    image: eda-python
    ports:
      - "8888:8888"
    volumes:
      - ./workspace:/workspace
      - ./data:/data
    networks:
      - data_network
    env_file:
      - .env

  # julia:
  #   build:
  #     context: ./docker/julia
  #     dockerfile: Dockerfile
  #   container_name: eda-julia
  #   image: eda-julia
  #   ports:
  #     - "8888:8888"
  #   volumes:
  #     - ./workspace:/workspace
  #     - ./data:/data
  #     - julia-packages:/home/jupyter/.julia
  #   environment:
  #     - JULIA_NUM_THREADS=auto
  #   networks:
  #     - data_network
  #   env_file:
  #     - .env

  # r:
  #   build:
  #     context: ./docker/r
  #     dockerfile: Dockerfile
  #   container_name: eda-r
  #   image: eda-r
  #   ports:
  #     - "8787:8787"
  #   volumes:
  #     - ./workspace:/workspace
  #     - ./data:/data
  #   networks:
  #     - data_network
  #   env_file:
  #     - .env
  
  # web:
  #   build:
  #     context: .
  #     dockerfile: docker/web/Dockerfile
  #     # context: ./docker/web
  #     # dockerfile: Dockerfile
  #   container_name: eda-web
  #   image: eda-web
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./webserver:/app
  #     - /app/node_modules
  #     - ./data:/data
  #   networks:
  #     - data_network
  #   env_file:
  #     - .env
      
  # mlflow:
  #   image: ghcr.io/mlflow/mlflow:v2.3.1
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:${POSTGRES_PASSWORD}@postgres/mlflow
  #     - MLFLOW_ARTIFACTS_DESTINATION=/mlflow/artifacts
  #   volumes:
  #     - mlflow_data:/mlflow
  #   depends_on:
  #     - postgres
  #   networks:
  #     - data-network

  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_USER=mlflow
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=mlflow
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - data-network

  # redis:
  #   image: redis:7-alpine
  #   command: redis-server --requirepass ${REDIS_PASSWORD}
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - data-network

  # minio:
  #   image: minio/minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   environment:
  #     - MINIO_ROOT_USER=${MINIO_ROOT_USER}
  #     - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  #   volumes:
  #     - minio_data:/data
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - data-network

networks:
  data_network:
    driver: bridge
    # ipam:
    #   driver: default
    #   config:
    #     - subnet: 172.28.0.0/16

volumes:
  workspace:
  data:
  # julia-packages:
  # webserver: